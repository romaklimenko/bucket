import Head from 'next/head'
import { KeyboardEvent, ReactNode } from 'react';
import styles from '../../styles/Sample.module.css'
import { sample } from '../../lib/api';
import React, { useState } from 'react';
import { BlobDocument } from '../../models/documents';

interface Props {
}

interface State {
  history: BlobDocument[], // FILO [0, 1, 2] -> prev() == pop() -> 2
  current?: BlobDocument; // 3
  next: BlobDocument[]; // FIFO [6, 5, 4] -> next() == pop() -> 4
}

export default class Sample extends React.Component<Props, State> {

  constructor(props: Props) {
    super(props);
    this.state = {
      history: [],
      next: []
    };
    this.handleHotKey = this.handleHotKey.bind(this);
  }

  componentDidMount() {
    this.more();
  }

  render(): ReactNode {
    const media = !!this.state.current
      ?
      <img src={`/api/blob/${this.state.current._id}/${this.state.current.paths[0].split('/').pop()}`} alt={this.state.current.paths[0]} />
      :
      null;

    return (
      <div className={styles.container} style={{ backgroundColor:"cyan", minHeight: "100vh" }} onKeyDown={this.handleHotKey} tabIndex={-1}>
        <Head>
          <title>Sample Gallery</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <div>history length: {this.state.history.length}</div>
          <div>current: {JSON.stringify(this.state.current)}</div>
          <div>next length: {this.state.next.length}</div>
          {media}
        </main>
      </div>);
  }

  async handleHotKey(e: KeyboardEvent<HTMLDivElement>) {
    console.log(this);
    console.log(e.key);
    switch (e.key) {
      case "ArrowLeft":
        this.prev();
        break;
      case "ArrowRight":
        await this.next();
        break;
      // case "ArrowUp":
      //   this.more();
      //   break;
      // case "ArrowDown":
      //   this.less();
      //   break;
      default:
        break;
    }
    // console.log(await sample());
  }

  async more() {
    const blobDocuments = await sample();
    const next = this.state.next;
    next.push(...blobDocuments);
    this.setState({ next });
  }

  async next() {
    if (this.state.next.length < 10) {
      await this.more();
    }
    if (this.state.next.length === 0) {
      return;
    }
    if (this.state.current) {
      this.setState({ history: [...this.state.history.slice(-49), this.state.current] });
    }
    const next = this.state.next;
    this.setState({ current: next.pop() });
    this.setState({ next });
  }

  async prev() {
    if (this.state.history.length === 0) {
      return;
    }
    if (this.state.current) {
      this.setState({ next: [this.state.current, ...this.state.next ] });
    }
    const history = this.state.history;
    this.setState({ current: history.pop() });
    this.setState({ history });
  }
}
