import Head from "next/head";
import { KeyboardEvent, ReactNode } from "react";
import styles from "../../styles/Sample.module.css";
import { get, put, sample } from "../../lib/api";
import React, { useState } from "react";
import { BlobDocument } from "../../models/documents";
import { level, levelBadgeClass, size } from "../../lib/utils";

interface Props {}

interface State {
  history: BlobDocument[]; // FILO [0, 1, 2] -> prev() == pop() -> 2
  current: BlobDocument | null; // 3
  next: BlobDocument[]; // FIFO [6, 5, 4] -> next() == pop() -> 4
  showInfo: boolean;
}

export default class Sample extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = {
      history: [],
      current: null,
      next: [],
      showInfo: false,
    };
    this.handleHotKey = this.handleHotKey.bind(this);
  }

  componentDidMount() {
    this.next();
    document.addEventListener("keydown", this.handleHotKey as any, true);
  }

  componentWillUnmount() {
    document.removeEventListener("keydown", this.handleHotKey as any, true);
  }

  render(): ReactNode {
    const media = !!this.state.current ? (
      <img
        className="img-fluid"
        style={{ maxHeight: "100vh" }}
        src={`/api/blob/${this.state.current._id}/${this.state.current.paths[0]
          .split("/")
          .pop()}`}
        alt={this.state.current.paths[0]}
      />
    ) : (
      <span
        style={{ height: "100vh", width: "100%" }}
      >
        Loading...
      </span>
    );

    const paths = this.state.current
      ? this.state.current.paths.map((path, i) => (
          <span key={i} className="badge bg-primary">
            {path}
          </span>
        ))
      : null;

    const infoBadges = this.state.showInfo ? (
      <>
        <span key="_id" className="badge bg-secondary">
          {this.state.current?._id}
        </span>
        <span key="contentType" className="badge bg-secondary">
          {this.state.current?.contentType}
        </span>
        <span key="created" className="badge bg-secondary">
          created:{this.state.current?.created}
        </span>
        <span key="modified" className="badge bg-secondary">
          modified:{this.state.current?.lastModified}
        </span>
      </>
    ) : null;

    return (
      <div
        className="container-fluid"
        style={{ backgroundColor: "#1e1e1e", color: "#fff" }}
      >
        <Head>
          <title>Sample Gallery</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className="row">
          <div className="col-md-12">{media}</div>
          <div style={{ position: 'fixed', top: 10, right: 10, width: "auto" }}>
            <span className={levelBadgeClass(this.state.current?.level)}>
              {level(this.state.current?.level)}
            </span>{" "}
            <span className="badge bg-secondary">
              {size(this.state.current?.length ?? 0)}
            </span>{" "}
            {infoBadges}
          </div>
          <div
            style={{ position: 'fixed', bottom: 10, right: 10, width: "auto" }}
          >
            {paths}
          </div>
          <div
            style={{ position: 'fixed', bottom: 10, left: 10, width: "auto" }}
          >
            <span className="badge bg-secondary">
              &larr; {this.state.history.length}
            </span>
            <span className="badge bg-secondary">
              {this.state.next.length} &rarr;
            </span>
          </div>
        </div>
      </div>
    );
  }

  async handleHotKey(e: KeyboardEvent) {
    switch (e.code) {
      case "ArrowLeft":
      case "KeyA":
        this.prev();
        break;
      case "ArrowRight":
      case "KeyD":
        await this.next();
        break;
      case "KeyI":
        this.setState({ showInfo: !this.state.showInfo });
        break;
      case "ArrowUp":
      case "KeyW":
        await this.up();
        break;
      case "ArrowDown":
      case "KeyS":
        await this.down();
        break;
      default:
        break;
    }
  }

  async more() {
    const blobDocuments = await sample();
    const next = this.state.next;
    next.push(...blobDocuments);
    this.setState({ next });
  }

  async next() {
    if (this.state.next.length < 10) {
      await this.more();
    }
    if (this.state.next.length < 1) {
      return;
    }
    if (this.state.current) {
      this.setState({
        history: [...this.state.history.slice(-49), this.state.current],
      });
    }
    const next = this.state.next;
    this.setState({ current: null });
    setTimeout(() => {
      this.setState({ current: next.pop()! });
      this.setState({ next });
    }, 0);
  }

  async prev() {
    if (this.state.history.length === 0) {
      return;
    }
    if (this.state.current) {
      this.setState({ next: [...this.state.next, this.state.current] });
    }
    const history = this.state.history;
    this.setState({ current: history.pop()! });
    this.setState({ history });
  }

  async up() {
    const current = this.state.current;
    if (!current) {
      return;
    }
    current.level = Math.min(1, current.level + 1);
    this.setState({ current });
    await put(current);
  }

  async down() {
    const current = this.state.current;
    if (!current) {
      return;
    }
    current.level = Math.max(-1, current.level - 1);
    this.setState({ current });
    await put(current);
  }
}
